name: mono-repo-deploy

on:
  push:
    branches: [main]
  pull_request:
    types: [closed]

concurrency:
  group: mono-repo-deploy
  cancel-in-progress: true

env:
  EC2_HOST: ${{ secrets.EC2_HOST }}
  EC2_USER: ${{ secrets.EC2_USER }}
  EC2_KEY:  ${{ secrets.EC2_SSH_KEY }}
  DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASS: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  deploy-backend:
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect backend changes
        id: backend-changes
        run: |
          files=$(git diff --name-only ${{ github.event.before || 'HEAD~1' }} $GITHUB_SHA)
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          if echo "$files" | grep -q '^backend/'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Log in to Docker Hub
        if: steps.backend-changes.outputs.changed == 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USER }}
          password: ${{ env.DOCKER_PASS }}

      - name: Build and push backend image
        if: steps.backend-changes.outputs.changed == 'true'
        run: |
          cd backend
          docker build -t ${{ env.DOCKER_USER }}/fastapi-server:latest .
          docker push ${{ env.DOCKER_USER }}/fastapi-server:latest

      - name: Generate .env file from secrets
        if: steps.backend-changes.outputs.changed == 'true'
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" > backend/.env
          echo "PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}" >> backend/.env
          echo "PINECONE_HOST=${{ secrets.PINECONE_HOST }}" >> backend/.env
          echo "DB_HOST=${{ secrets.DB_HOST }}" >> backend/.env
          echo "DB_USER=${{ secrets.DB_USER }}" >> backend/.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> backend/.env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> backend/.env

      - name: Upload backend .env to EC2
        if: steps.backend-changes.outputs.changed == 'true'
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_KEY }}
          source: "backend/.env"
          target: "/home/ubuntu/app/"

      - name: Deploy backend on EC2
        if: steps.backend-changes.outputs.changed == 'true'
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ env.EC2_KEY }}
          script: |
            cd /home/ubuntu/app
            git pull origin main
            cd backend
            docker compose down
            docker image prune -af
            docker compose pull
            docker compose up -d

  deploy-frontend:
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect frontend changes
        id: frontend-changes
        run: |
          files=$(git diff --name-only ${{ github.event.before || 'HEAD~1' }} $GITHUB_SHA)
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          if echo "$files" | grep -q '^frontend/'; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate frontend .env file from secrets
        if: steps.frontend-changes.outputs.changed == 'true'
        run: |
          echo "REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}" > frontend/.env

      - name: Build frontend
        if: steps.frontend-changes.outputs.changed == 'true'
        run: |
          cd frontend
          npm ci
          npm run build

      - name: Remove existing frontend build
        if: steps.frontend-changes.outputs.changed == 'true'
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo rm -rf /home/***/app/frontend/build

      - name: Deploy frontend build to EC2
        if: steps.frontend-changes.outputs.changed == 'true'
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "frontend/build/*"
          target: "/home/ubuntu/app/"
